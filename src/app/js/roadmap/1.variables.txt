var 
let 
const 


var declarations are globally scoped or function/locally scoped.
var variables can be re-declared and updated
var variables are hoisted to the top of their scope and initialized with a value of undefined


let is only available for use within that block
let can be updated but not re-declared
let declarations are hoisted to the top. Unlike var which is initialized as undefined, the let keyword is not initialized. So if you try to use a let variable before declaration, you'll get a Reference Error

const declarations can only be accessed within the block they were declared
const cannot be updated or re-declared
Just like let, const declarations are hoisted to the top but are not initialized


So just in case you missed the differences, here they are:

var declarations are globally scoped or function scoped while let and const are block scoped.
var variables can be updated and re-declared within its scope; let variables can be updated but not re-declared; const variables can neither be updated nor re-declared.
They are all hoisted to the top of their scope. But while var variables are initialized with undefined, let and const variables are not initialized.
While var and let can be declared without being initialized, const must be initialized during declaration.


rules for constructing names for variables (unique identifiers) are:

Names can contain letters, digits, underscores, and dollar signs.
Names must begin with a letter.
Names can also begin with $ and _ (but we will not use it in this tutorial).
Names are case sensitive (y and Y are different variables).
Reserved words (like JavaScript keywords) cannot be used as names.

