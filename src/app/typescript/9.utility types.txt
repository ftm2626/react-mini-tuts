1.Awaited<Type>
This type is meant to model operations like await in async functions, or the .then() method on Promises - specifically, the way that they recursively unwrap Promises.

2.Partial<Type>
Constructs a type with all properties of Type set to optional. This utility will return a type that represents all subsets of a given type.

3.Required<Type>
Constructs a type consisting of all properties of Type set to required. The opposite of Partial. even if one property is optional

4.Readonly<Type>
Constructs a type with all properties of Type set to readonly, meaning the properties of the constructed type cannot be reassigned.

5.Record<Keys, Type>
Constructs an object type whose property keys are Keys and whose property values are Type. This utility can be used to map the properties of a type to another type.

6.Pick<Type, Keys>
Constructs a type by picking the set of properties Keys (string literal or union of string literals) from Type.

7.Omit<Type, Keys>
Constructs a type by picking all properties from Type and then removing Keys (string literal or union of string literals). The opposite of Pick.

8.Exclude<UnionType, ExcludedMembers>
Constructs a type by excluding from UnionType all union members that are assignable to ExcludedMembers.

9.Extract<Type, Union>
Constructs a type by extracting from Type all union members that are assignable to Union.

10.NonNullable<Type>
Constructs a type by excluding null and undefined from Type.

11.Parameters<Type>
Constructs a tuple type from the types used in the parameters of a function type Type.
For overloaded functions, this will be the parameters of the last signature

12.ConstructorParameters<Type>
Constructs a tuple or array type from the types of a constructor function type. It produces a tuple type with all the parameter types (or the type never if Type is not a function).

13.ReturnType<Type>
Constructs a type consisting of the return type of function Type.
For overloaded functions, this will be the return type of the last signature; see Inferring Within Conditional Types.

14.InstanceType<Type>
Constructs a type consisting of the instance type of a constructor function in Type.

15.NoInfer<Type>
Blocks inferences to the contained type. Other than blocking inferences, NoInfer<Type> is identical to Type.

16.ThisParameterType<Type>
Extracts the type of the this parameter for a function type, or unknown if the function type has no this parameter.

17.OmitThisParameter<Type>
Removes the this parameter from Type. If Type has no explicitly declared this parameter, the result is simply Type. Otherwise, a new function type with no this parameter is created from Type. Generics are erased and only the last overload signature is propagated into the new function type.

18.ThisType<Type>
This utility does not return a transformed type. Instead, it serves as a marker for a contextual this type. Note that the noImplicitThis flag must be enabled to use this utility.



19.Intrinsic String Manipulation Types
Uppercase<StringType>
Lowercase<StringType>
Capitalize<StringType>
Uncapitalize<StringType>