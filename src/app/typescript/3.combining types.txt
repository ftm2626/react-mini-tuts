type hasName = {name : string}
type hasAge = {age : string}

1. Union Types : in TypeScript allow you to specify multiple possible types for a single variable or parameter. A union type is written as a vertical bar "|" separated list of types.
   type hasNameOrAge = hasName | hasAge
   const a: hasNameOrAge = { name: "john" } ✅
   const b: hasNameOrAge = { age: 25 } ✅
   const c: hasNameOrAge = { name: "john" , age: 25 } ✅

2.intersection type creates a new type by combining multiple existing types. The new type has all features of the existing types. To combine types, you use the "&" operator.
    type hasNameAndAge = hasName & hasAge
    const d:hasNameAndAge = { name: "john" , age: 25 } ✅
    const e:hasNameAndAge = { name: "john" } ❌

3.Type Alias : in TypeScript allows you to create a new name for a type.
    type Name = string;
    type Age = number;
    type User = { name: Name; age: Age };

    const user: User = { name: 'John', age: 30 };

4.The keyof operator : in TypeScript is used to get the union of keys from an object type
    interface User {
    name: string;
    age: number;
    location: string;
    }

    type UserKeys = keyof User; // "name" | "age" | "location"
    const key: UserKeys = 'name';